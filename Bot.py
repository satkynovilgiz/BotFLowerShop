from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import logging

logging.basicConfig(level=logging.INFO)

PRODUCTS = [
    {
        "name": "üå∏ –¶–≤–µ—Ç–æ–∫ 1",
        "description": "–ö—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç–æ–∫ ‚Ññ1",
        "price": "$10",
        "photo_url": "https://i.pinimg.com/236x/6b/6d/c3/6b6dc3014162fc5cab8d73fb57fd4d9c.jpg",
        "buy_url": "https://example.com/order1"
    },
    {
        "name": "üåπ –¶–≤–µ—Ç–æ–∫ 2",
        "description": "–ö—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç–æ–∫ ‚Ññ2",
        "price": "$15",
        "photo_url": "https://www.povarenok.ru/data/cache/2017mar/16/22/1951015_46600-710x550.jpg",
        "buy_url": "https://example.com/order2"
    },
    {
        "name": "üå∑ –¶–≤–µ—Ç–æ–∫ 3",
        "description": "–ö—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç–æ–∫ ‚Ññ3",
        "price": "$20",
        "photo_url": "https://kartin.papik.pro/uploads/posts/2023-06/thumbs/1686964607_kartin-papik-pro-p-kartinki-tsveti-dlya-svetika-s-nadpisyu-23.jpg",
        "buy_url": "https://example.com/order3"
    },
    {
        "name": "üåª –¶–≤–µ—Ç–æ–∫ 4",
        "description": "–ö—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç–æ–∫ ‚Ññ4",
        "price": "$25",
        "photo_url": "https://kartin.papik.pro/uploads/posts/2023-06/1686851005_kartin-papik-pro-p-kartinki-tsveti-samie-krasivie-buketi-47.jpg",
        "buy_url": "https://example.com/order4"
    },
    # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 10 —Ç–æ–≤–∞—Ä–æ–≤
]

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="show_0")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("HELLO welcome to our flower shop üå∏", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
async def send_product(update, context, product_index):
    product = PRODUCTS[product_index]
    caption = f"*{product['name']}*\n{product['description']}\n–¶–µ–Ω–∞: {product['price']}"

    buttons = [
        InlineKeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å", url=product['buy_url'])
    ]
    if product_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{product_index}"))
    if product_index < len(PRODUCTS) - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_{product_index}"))

    keyboard = [buttons]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ —ç—Ç–æ callback_query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å—é
    if update.callback_query:
        await update.callback_query.edit_message_media(
            media=InputMediaPhoto(media=product["photo_url"], caption=caption, parse_mode='Markdown'),
            reply_markup=reply_markup
        )
        await update.callback_query.answer()
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–ª–∏ –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∏–∑ callback)
        await update.message.reply_photo(photo=product["photo_url"], caption=caption, parse_mode='Markdown', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update, context):
    query = update.callback_query
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä "next_0", "prev_1", "show_0"
    action, index_str = data.split('_')
    index = int(index_str)

    if action == "show":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º 0 (–ø–µ—Ä–≤—ã–π)
        await send_product(update, context, index)
    elif action == "next":
        new_index = index + 1
        if new_index < len(PRODUCTS):
            await send_product(update, context, new_index)
    elif action == "prev":
        new_index = index - 1
        if new_index >= 0:
            await send_product(update, context, new_index)
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π - –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ "–≤–∏—Å–µ–ª" –∑–∞–ø—Ä–æ—Å
        await query.answer()

def main():
    from telegram.ext import Application

    app = ApplicationBuilder().token("7859289535:AAGHHdzhp8LiFp-ZE0_AE4LRTzhLAnRyLT0").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))

    print("Flower Shop Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
